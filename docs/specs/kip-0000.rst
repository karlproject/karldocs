===============================
KIP 0: KARL Improvement Process
===============================

The KARL project needs a way to process proposed work, through
specification, into development, and on through release and
maintenance. This "KARL Improvement Proposal" describes the improvement
process itself.

.. note::

    This doesn't yet get into the details of mapping into JIRA. We
    should first get the process straight between the partners. Based
    on that feedback, we should then get with the JIRA experts (6FU) to
    decide the right way to map things.

Background
==========

The KARL project has a number of actors involved: OSF as primary
driver, Six Feet Up (6FU) as a development partner, Oxfam as a
feature partner, gocept and 6FU as hosting partners, and an open source
community that is receiving KARL and doing various things that have
some consideration.

Currently, new work is discussed in various contexts, documented to
some degree, and work is commissioned by various organizations in
various ways. The work is (or isn't) specified. Work is commissioned
and tracked in one or more systems. Releases are made and some sites
are updated. Bugs are reported, for the most part,
in a single system (Launchpad.)

There isn't currently a single, one-stop-shopping place to find out
what is proposed, what is being worked on, and when something might
arrive.

Goals
=====

- Unify the various ways of doing things, by the various actors,
  into a single approach

- Provide visibility to all interested parties (including outsiders)
  regarding what is contemplated, what is commissioned, what it will do,
  when it will arrive, and issues regarding the work

- Where possible, automate this single process with a tool

- Over time, gradually adopt this process amongst the parties

Non-Goals
=========

- Trying to do everything at once. (Instead, work in an emergent way.)

- Doing all customer-specific work in core. Instead, promote
  pluggability in code but also process.

- Operations-related process and customer-specific issues (potentially
  with privacy/security/confidentiality issues.)

Overview
========

We want a process that spans and scales:

- Spans from "we should be doing X" all the way through "file a bug
  against X which was deployed in release Y."

- Scales from casually engaged business managers through
  deeply-involved developers and supporters, across firmly-committed
  organizations and those still evaluating

In summary:

- A *Feature* is a quick, lightweight way for business managers to
  express a need in a "Feature Backlog"

- A *Specification* is a feature that has been selected for more
  investment via analysis

- A *Task* is an item of development work (development, system
  administration), usually in support of a Specification.

- A *Bug* is an item of maintenance work. Similar to,
  but not exactly the same as, a Task.

- An *Iteration* is a unit of scheduling.

- A *Branch* is an isolated unit of code development.

- *Dev Testing* is manual and automated testing of a branch,
  without other branches, without data.

- *Integration Testing* combines multiple units of work,
  with production data, for final pre-release testing.

- A *Release* is a unit of distribution.

- *Production Testing* is testing in production after a release,
  to completely close the work.

- The *Roadmap* is a planning instrument showing what just happened,
  is happening, and will happen

Scenario
========

Nat and Tom are talking to OSF users during an office meeting. One of
them says "It sure would be nice to have a multiple download facility."
Nat asks: "For example?" "When I want to download all the images in a
folder, I have to visit each one, do the download, then go back to the
folder. It takes a ton of clicks!"

Nat goes to the Feature Backlog and adds a Feature. Not too many fields
on the form. Only takes 3 minutes.

Time passes.

OSF is having its iteration planning call with Paul to plan work during
the coming month. Since the Feature Backlog is the definitive source of
all that might possibly be done, the call focuses on the Feature
Backlog.

First, Nat leads an update effort, where stuff is re-prioritized. Turns
out that "Multi-File Upload" is at the top of the list. The group looks
at the KARL Roadmap, sees there is capacity in the upcoming schedule,
and decides to go for it. Paul is asked to write a Specification.

During the Partner call, OSF tells 6FU that they plan to work on
"Multi-File Upload". Calvin says "Yep, I saw that on the Feature
Backlog. We were interested in that too, glad to see it is being
commissioned. Let us know when there is a spec."

Paul goes off, writes a draft spec, gets Nat to review it. Nat makes
some comments. Paul refines, talks to some devs, gets an effort
estimate. Paul also lets the partners know that a draft spec is ready.

After a comment period, OSF says "Go!" The draft spec is a real
Specification and gets a permanent identifier (KIP-0047). The
Specification is assigned a Development Quarter of Q3 (which helps in
high-level budgeting) and a Deployment Quarter of Q3 (which helps set
user expectations.) The Feature on the Feature Backlog is associated
with one or more of these Specifications and its status is updated.

Paul, as the PM for this Specification, starts assigning Tasks. This
involves looking at the resource pool and timeline to see who is
available. The tasks are targeted to Iterations and associated with the
Specification. Paul assigns the Task to Chris as part of an Iteration.
Chris does the work for the task as part of a branch, perhaps a branch
for all work on the Specification.

When Chris finishes a Task, he marks the Task as implemented. This
makes it appear on Jim's radar as something to test. Jim does so.

*TBD: What gets scheduled/targeted to what..does a Task get targeted to
an Iteration and a Specification get targeted to a Release? What is the
unit of divisiblity on Branch?*

As Jim does testing on the Tasks being completed as part of the
Specification, they might file Bugs associated with the Specification.
Paul sees the new Bug and assigns it to Carlos as part of an Iteration.
Carlos fixes the Bug, which makes it appear on Jim's radar for
testing. Jim tests and closes the bug.

At some point the Specification looks complete. It is now time to do
acceptance testing. Jim has the Branch deployed on the dev server and
does Dev Testing. If it looks good, Jim changes the status on the
Specification to "Dev Tested". Nat reviews the dev server. If it
matches what he wanted, Nat marks it as "Customer Accepted". This leads
to a merge request, asking the release manager to merge the branch when
the next release is being prepared.

Later, it is time to do a Release. The next step is to bundle up
various branches and do Integration Testing on the staging server. The
release manager takes the branches scheduled for this Release and
merges them to the master. The master is then updated on the staging
server and testing begins. If testing passes, the master is tagged with
the release number.

At some later point, certain deployed KARL sites are updated with that
Release. Some of those KARL sites (OSF) are then re-tested to ensure
that the tickets in that Release actually function correctly in
production.

OSF wants to know what's new in the production release. They go to the
Roadmap and find the link for the Release. This page shows all the
Specifications, Tasks, and Bugs in that Release.

The Feature on the Feature Backlog has a change in status,
showing that it is deployed. **Note: This will be hard to do since
different KARLs have different deployment schedules.**

Planning Scenarios
==================

The scenario above largely describes the linear process of an idea
getting from start to finish. We should also describe how some of the
give-and-take planning might be improved.

Feature Backlog
---------------

- Make it very easy for less-technical business people to record the
  minimum needed about an idea

- Then, make it very productive to organize and re-organize the backlog
  in useful ways

- Need to have groupings within backlog (e.g. "In-Scope and Budgeted",
  "May Happend Depending on Budget", "Wishlist")

- Allow backlogs per organization/funder

- Primarily, do ordering instead of priority like SCRUM "product
  backlogs"

- Later, allow adding value with other artifacts (one or more
  Specifications, and Tasks/Bugs associated with Specifications or the
  Feature itself.) All these are traceable back to the Feature.

- Organize the backlog by importance, estimated effort, timeframe,
  component, status, and organization (who is requesting it)

- Allow commenting on the Feature

- We need a decent set of statuses and/or workflow so we know the
  disposition of features (new, in discussion, rejected, deferred,
  in specification, in development, in testing, released, deployed)

- We are likely to have a very long list of cool ideas. We need to be
  able to change our minds and play around with the sub-sub-pile that
  matters.

- This should be widely visible. We need to discourage each partner
  maintaining separate lists of what is under discussion. Even if it is
  the most preliminary of preliminary, get it on the list and make it
  visible.

Specifying
----------

- A very good workflow/status approach to make it clear when the key
  people have agreed and work is ready to be commissioned

- Loose, varying structure (don't try to make one size fits all)

- Easy text format

- Associate mockups with specifications (screenshot attachments,
  remote URLs)

- Decent facilities for tracking discussion, open questions, and
  integrating updates

- Versioning

Budgeting
---------

- Guess at effort on Features in a quarter for the purposes of SOW
  planning

- Make it clear that this is *not* a system for timekeeping of actual
  costs

- This is most likely too ambitious of a first step with JIRA

Scheduling
----------

- Dividing the big pile into the little pile

- Finally allow us to target development and release (and perhaps
  deployment) separately. Launchpad doesn't let us do that. Quite
  cumbersome for us to know what is planned for, or went into, a release

- Bulk operations

- Capacity planning

- Easily move stuff between Iterations

- Hopefully Greenhopper can make this a very productive planning process

Development
-----------

- Break the big pile down into a little pile, so developers can ignore
  everything except what is on their plate

- Have a good idea on how to bundle things into branches,
  while avoiding overbundling

- Try to give developers an ordered list within an iteration,
  vs. a prioritized list

- Possibly use workflow instead of status to bundle up business rules

- Conducting ticket conversations by email is a must

Tool Details
============

Some notes about fields we might want on each artifact.

- Provide stable interlinking between tools, e.g. specifications and
  issue tracker. Not just on individual items such as the link to a
  specification, but collections of items, like a tag or release.


Feature
-------

- identifier, title, short description

- importance, initial effort, remaining effort, development timeframe,
  release timeframe,

- creator, date created, date modified, organization

- component, status

Specification
-------------

- identifier, title, short description, text body,

- attachments, "mockups", comments

- creator, date created, date modified

- importance, component, status, quarter, target release

- links to related Tasks and Bugs

- ordering (replace idea of "priority" with an ordered backlog)